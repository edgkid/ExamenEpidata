package com.epidata.prueba.main;

import java.util.ArrayList;
import java.util.List;

public class Main {
	

	
	static boolean validPosition (List<Position> board, int x, int y) {
		
		boolean value = false;
		
		// Copruebo filas y columnas
		for (int row = 0; row< 8; row ++) {
			if (row != x) {
				for (int column = 0; column < 8; column ++ ) {
					if (column != y) {
						
						for (int j= 0; j < board.size(); j ++) {
							
							if (board.get(j).getX() == x || board.get(j).getY() == y) {
								value = false;
								break;
							}else {
								value = true;
								
							}
							
						}
						
					}
				}	
			}
		}
		
		//Compruebo diagonal superior derecha
		for (int row =x;  row >= 0; row--) {
			for(int columna = y; columna <= 7; columna ++ ) {
				for (int j= 0; j < board.size(); j ++) {
					
					if (board.get(j).getX() == x || board.get(j).getY() == y) {
						value = false;
						break;
					}else {
						value = true;
						
					}
				}
				
			}
		}
		
		//Compruebo diagonal inferior Derecha
		for (int row =x;  row >= 7; row ++) {
			for(int columna = y; columna <= 7; columna ++ ) {
				for (int j= 0; j < board.size(); j ++) {
					
					if (board.get(j).getX() == x || board.get(j).getY() == y) {
						value = false;
						break;
					}else {
						value = true;
						
					}
				}
				
			}
		}
		return value;
	}
	
	static public List<Position> findPosition (List<Position> board, int totalQueens ) {
		
		
		int x =new  Util().randomRowOrColumn();
		int y =new  Util().randomRowOrColumn();
		
		if (totalQueens != 0) {
			
			if (validPosition(board, x, y)) {
				
				Position newPosition = new Position(x,y);
				board.add(newPosition);
				totalQueens --;
				findPosition(board, totalQueens);
				
			}else {
				findPosition(board, totalQueens);
			}
			
		}else {
			return board;
		}
		
		return board;
	}

	
	public static void main(String[] args) {
		
		Util util = new Util();
		int row = util.randomRowOrColumn();
		int column = util.randomRowOrColumn();
		
		Position position = new Position(row, column);
		List<Position> listPosition= new ArrayList<Position>();
		listPosition.add(position);
		
		listPosition = findPosition(listPosition, 7);
		
		System.out.println("Reina Pivote " +  "x: " + position.getX() +"y: " + position.getY());
		for (int x= 0; x < listPosition.size(); x ++) {
			
			System.out.println("Reina ("+ x +") x: " + listPosition.get(x).getX() + " y: " + listPosition.get(x).getY());
			
		}
		
		

	}
	
	

}
